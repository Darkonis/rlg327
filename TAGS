
dungeon_maker.c,2118
#define DUMP_HARDNESS_IMAGES 21,419
# define rand_under(25,564
# define rand_range(29,707
# define UNUSED(30,780
typedef struct corridor_path 32,819
  heap_node_t *hn;hn33,850
  uint8_t pos[pos34,869
  uint8_t from[from35,887
  int32_t cost;36,906
} corridor_path_t;37,922
#define DUNGEON_X 49,1107
#define DUNGEON_Y 50,1141
#define MIN_ROOMS 51,1175
#define MAX_ROOMS 52,1208
#define ROOM_MIN_X 53,1241
#define ROOM_MIN_Y 54,1274
#define ROOM_MAX_X 55,1307
#define ROOM_MAX_Y 56,1341
#define SAVE_DIR 57,1374
#define DUNGEON_SAVE_FILE 58,1415
#define DUNGEON_SAVE_SEMANTIC 59,1456
#define DUNGEON_SAVE_VERSION 60,1502
#define mappair(62,1537
#define mapxy(63,1594
#define hardnesspair(64,1629
#define hardnessxy(65,1696
static uint32_t adjacent_to_room(99,2273
static uint32_t is_open_space(107,2534
static int32_t corridor_path_cmp(112,2633
static void dijkstra_corridor(116,2783
static void dijkstra_corridor_inv(216,6521
#define hardnesspair_inv(269,7843
static int connect_two_rooms(319,10514
static int create_cycle(338,11166
static int connect_rooms(380,12731
int gaussian[gaussian393,12924
typedef struct queue_node 401,13080
  int x,402,13108
  int x, y;402,13108
  struct queue_node *next;next403,13120
} queue_node_t;404,13147
static int smooth_hardness(406,13164
static int empty_dungeon(565,17433
static int place_rooms(584,17809
static int make_rooms(621,18996
int gen_dungeon(644,19557
void render_dungeon(656,19700
void delete_dungeon(713,20688
void init_dungeon(719,20761
int write_dungeon_map(724,20818
int write_rooms(737,21047
uint32_t calculate_dungeon_size(757,21466
int makedirectory(764,21713
int write_dungeon(799,22349
int read_dungeon_map(862,23844
int read_rooms(885,24442
int calculate_num_rooms(938,26258
int read_dungeon(946,26498
int read_pgm(1025,28382
void usage(1110,30785
void generateCompleteDistances(1119,30994
void generatePartialDistances(1256,36562
void generateDistances(1423,43204
int roll_call(1432,43454
void populateDun(1451,43840
void take_turn(1471,44224
void play(1485,44452
int main(1511,44901

dungeon_maker.h,1200
#define DUNGEON_MAKER_H 2,24
#define DUNGEON_X 15,294
#define DUNGEON_Y 16,328
typedef struct distance_path 18,391
  heap_node_t *hn;hn19,422
  uint8_t pos[pos20,441
  uint8_t from[from21,459
  int32_t cost;22,478
} distance_path_t;23,494
typedef enum __attribute__ ((__packed__)) terrain_type 25,514
  ter_debug,26,571
  ter_wall,27,584
  ter_wall_immutable,28,596
  ter_floor,29,618
  ter_floor_room,30,631
  ter_floor_hall,31,649
} terrain_type_t;32,667
typedef int16_t pair_t[pair_t33,685
typedef struct room 34,712
  pair_t position;35,734
  pair_t size;36,753
} room_t;37,768
struct dungeon{dungeon39,805
  uint32_t num_rooms;40,821
  room_t *rooms;rooms41,843
  terrain_type_t map[map42,860
 uint8_t hardness[hardness52,2417
  distance_path_t *completePath[completePath53,2458
  distance_path_t *partialPath[partialPath54,2513
  uint32_t num_Monsters;55,2567
  uint32_t cur_turn;56,2592
  uint32_t pc_speed;57,2613
  uint32_t pc_nturn;58,2634
  pair_t pc;59,2655
  monster_t *mon;mon60,2668
  uint8_t hasLost;61,2686
typedef enum dim 67,2957
  dim_x,68,2976
  dim_y,69,2985
  num_dims70,2994
} dim_t;71,3005
static uint32_t in_room(73,3015

heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

monster.c,232
#define ERRATIC 11,197
#define SMART 12,217
#define TELE 13,235
#define TUNNEL 14,252
void init_Monster(24,311
void move(38,577
void randMove(69,1139
void dumbMove(84,1468
void smartMove(109,1833
void preformMove(138,2520

monster.h,462
#define MONSTER_H2,18
typedef int16_t pair_t[pair_t14,270
typedef struct monster16,298
  uint8_t val;18,323
  pair_t pos;19,338
  uint8_t isErr;20,352
  uint8_t isSmart;21,369
  uint8_t isTele;22,388
  uint8_t isTun;23,406
  uint8_t speed;24,423
  uint8_t isSeen;25,440
  long long nextTurn;26,505
} monster_t;27,527
typedef struct dungeon dungeon_t;28,540
#define ERRATIC 32,620
#define SMART 33,640
#define TELE 34,658
#define TUNNEL 35,675

dungeon.h,0
